'use strict';
class CarCL {
  constructor(make, speed) {
    this.make = make;
    this.speed = speed;
  }

  accelerate() {
    this.speed += 10;
    console.log(`${this.make} accelerate : ${this.speed} km/h`);
  }

  brake() {
    this.speed -= 5;
    console.log(`${this.make} brake : ${this.speed}  km/h`);
    return this;
  }
  get speedUS() {
    return console.log(this.speed / 1.6);
  }
  set speedUS(speed) {
    return console.log((this.speed = speed * 1.6));
  }
}

class EVCl extends CarCL {
  #charge;
  constructor(make, speed, charge) {
    super(make, speed);
    this.#charge = charge;
  }
  chargeBattery(chargeTo) {
    this.#charge = chargeTo;
    return this;
  }
  accelerate() {
    this.speed += 20;
    this.#charge--;
    console.log(
      `${this.make} going at ${this.speed}km/h, with a charge of ${
        this.#charge
      }%`
    );
    return this;
  }
}
const rivan = new EVCl('Rivian', 120, 30);
console.log(rivan);
rivan.accelerate().accelerate().brake().chargeBattery(50).accelerate();
